
if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition, showError);
}
else {
    document.getElementById("Forecast").innerHTML = "Geolocation is not supported by this browser.";
}

function showPosition(position) {
    var lat = position.coords.latitude;
    var long = position.coords.longitude;
    const api_url = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${lat}%2C${long}?unitGroup=metric&key=CBSQGUETD89DVU5Q8RX5KG5M2&contentType=json`;
    
    // Calling that async function
    x = getapi(api_url);
    console.log(x)
    ShowIntel(x)
}

function showError(error) {
    switch (error.code) {
        case error.PERMISSION_DENIED:
            document.getElementById("Forecast").innerHTML = "User denied the request for Geolocation."
            break;
        case error.POSITION_UNAVAILABLE:
            document.getElementById("Forecast").innerHTML = "Location information is unavailable."
            break;
        case error.TIMEOUT:
            document.getElementById("Forecast").innerHTML = "The request to get user location timed out."
            break;
        case error.UNKNOWN_ERROR:
            document.getElementById("Forecast").innerHTML = "An unknown error occurred."
            break;
    }
}

async function getapi(url) {
    const response = await fetch(url)
    return await response.json()
}

function ShowIntel(promise)
{
    promise.then((user) => 
    {
        document.getElementById("Forecast").innerHTML = user.currentConditions.conditions;
        document.getElementById("Temp").innerHTML = "Temp: " + user.currentConditions.temp + "Â°C";
        document.getElementById("Humidity").innerHTML = "Humidity: " + user.currentConditions.humidity + "%";
    });
}

